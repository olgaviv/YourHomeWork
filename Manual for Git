 # Руководство по работе с Git
## Семинар 1

*git init* - команда, инициализирующая репозиторий в текущей директории.

*git status* - команда, описывающая текущее состояние репозитория.

*git add* - добавить файл

*git reset* - убрать изменения

*git log master* - показать коммиты в указанной ветке

*git branch* - показать список веток

*git stash* - временно сохранить незакоммиченные изменения и убрать их из рабочей директории

*git commit* - создаем коммит

## Семинар 2  - Ветвление в Git

### Создание веток

* Для создания новой ветки используется команда * git branch <branch_name>

* Для ознакомления с существующими в репозитории ветками используется команда *git branch*.

* С помощью команд git branch и git checkout вы можете создать неограниченное количество веток и переключаться между ними по мере необходимости

### Виды слияния
*Fast_forward - вид слияния, когда master догоняет другую ветку
*Auto_merging - слияние безконфликтное, но в разных ветках были свои изменения. В момент их слияния коммиты образуются автоматически

### Слияние веток

* При слиянии веток необходимо находиться в базовой ветке, а в команде *merge* указывать название сливаемой ветки.

* *git merge <branch_name>* - команда, осуществляющая слияние

### Возникновение и решение конфликтов

Если изменения в сливаемых ветках охватывают общую рабочую зону, это приводит к конфликту при слиянии

### Пути решения конфликтов


Если произошел конфликт, то есть несколько путей решения:
 1  accept current change - принять текущее изменение
 2  accept incoming change - принять входящие изменения
 3  accept both change - примите оба изменения
 4  compare changes - сравните изменения


## Семинар 3
## Работа с удаленными репозиториями

1. Делаем форк интересующего нас репозитория
2. Делаем git clone для нашей версии этого репозитория
3. Создаем ветку с предлагаемыми изменениями
4. Производим все изменения только в этой ветке
5. Отправляем эти изменения на свой аккаунт (push)
6. В окне Github появится возможность отправить pull requist